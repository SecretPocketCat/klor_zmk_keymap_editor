/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
    };

    macros {
        _: new_macro {
            compatible = "zmk,behavior-macro";
            label = "";
            #binding-cells = <0>;
            bindings = <>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp J            &kp W                        &kp F        &kp P      &kp G              &kp C            &kp L                         &kp U          &kp Y              &kp B
  &kp Z     &kp A            &kp R                        &kp S        &kp T      &kp D              &kp H            &kp N                         &kp E          &kp I              &kp O   &kp K
         &kp LALT  &hm LCTRL COMMA  &hm LSHIFT LEFT_PARENTHESIS        &kp V                                          &kp M  &hm RSHIFT RIGHT_PARENTHESIS  &hm LCTRL DOT  &hm LALT QUESTION
                                                      &lt 6 ESC  &lt 1 SPACE  &lt 5 TAB          &lt 3 RET  &lt 2 BACKSPACE           &lt 4 RC(BACKSPACE)
            >;
        };

        NAV {
            bindings = <
                   &trans     &trans     &trans     &trans     &trans          &kp K_CONTEXT_MENU      &kp HOME         &kp PG_DN  &kp PG_UP    &kp END
 &kp K_LOCK     &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)                 &kp K_POWER      &kp LEFT          &kp DOWN     &kp UP  &kp RIGHT  &kp CAPS
             &kp LEFT_ALT  &kp LCTRL  &kp LSHFT   &kp LGUI                                         &kp K_SELECT  &kp RC(K_SELECT)     &trans  &kp LCAPS
                                         &trans     &trans     &trans               &kp RS(ENTER)    &kp DELETE       &kp RC(DEL)
            >;
        };

        NUM {
            bindings = <
         &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
         &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };

        FUN {
            bindings = <
         &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
         &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
         &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
         &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };

        UNI {
            bindings = <
         &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
         &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };

        WIN {
            bindings = <
         &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
         &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };
    };
};
